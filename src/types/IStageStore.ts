import IElement, { ElementObject } from "@/types/IElement";
import { IPoint } from "@/types/index";
import { CreatorTypes } from "@/types/Creator";
import IStageSetter from "@/types/IStageSetter";

// 用于维护舞台数据关系
export default interface IStageStore extends IStageSetter {
  get visibleElements(): IElement[];
  get creatingElements(): IElement[];
  get provisionalElements(): IElement[];
  get selectedElements(): IElement[];
  get targetElements(): IElement[];
  get stageElements(): IElement[];
  get noneStageElements(): IElement[];
  get rangeElements(): IElement[];
  get uniqSelectedElement(): IElement;
  get rotatingTargetElements(): IElement[];
  get editingElements(): IElement[];
  get isSelectedEmpty(): boolean;
  get isTargetEmpty(): boolean;
  get isRangeEmpty(): boolean;
  get isEditingEmpty(): boolean;
  get isStageEmpty(): boolean;
  get isNoneStageEmpty(): boolean;
  get isEmpty(): boolean;
  get isVisibleEmpty(): boolean;

  createElementModel(type: CreatorTypes, coords: IPoint[], data?: any): ElementObject;
  addElement(element: IElement): IElement;
  removeElement(id: string): IElement;
  updateElementById(id: string, props: Partial<IElement>): IElement;
  updateElements(elements: IElement[], props: Partial<IElement>): IElement[];
  updateElementModel(id: string, data: Partial<ElementObject>): IElement;
  updateElementsModel(elements: IElement[], props: Partial<ElementObject>): void;
  hasElement(id: string): boolean;
  findElements(predicate: (node: IElement) => boolean): IElement[];
  getElementById(id: string): IElement;
  getIndexById(id: string): number;
  creatingElement(points: IPoint[]): IElement;
  creatingArbitraryElement(coord: IPoint, tailAppend: boolean): IElement;
  finishCreatingElement(): IElement;
  updateSelectedElementsMovement(offset: IPoint): void;
  updateSelectedElementsRotation(point: IPoint): void;
  updateSelectedElementsTransform(point: IPoint): void;
  calcRotatingElementsCenter(): void;
  restoreElementsOriginalProps(elements: IElement[]): void;
  refreshElementsPosition(elements: IElement[]): void;
  forEach(callback: (element: IElement, index: number) => void): void;
  refreshStageElements(): void;
  refreshElements(elements: IElement[]): void;
  createImageElement(image: HTMLImageElement | ImageData, options: Partial<ImageData>): Promise<IElement>;
  insertImageElement(image: HTMLImageElement | ImageData): Promise<IElement>;
  deleteSelects(): void;
  isElementSelected(element: IElement): boolean;
  selectAll(): void;
  deSelectAll(): void;
  selectElement(element: IElement): void;
  deSelectElement(element: IElement): void;
  selectElements(elements: IElement[]): void;
  deSelectElements(elements: IElement[]): void;
  toggleSelectElement(element: IElement): void;
  toggleSelectElements(elements: IElement[]): void;
  cancelTargetElements(): void;
  beginEditingElements(elements: IElement[]): void;
  endEditingElements(elements: IElement[]): void;
  getFinishedSelectedElements(): IElement[];
}